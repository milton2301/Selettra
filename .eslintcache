[{"C:\\Users\\amilt\\OneDrive\\Área de Trabalho\\PI_2022\\selettra_recruitament\\src\\index.js":"1","C:\\Users\\amilt\\OneDrive\\Área de Trabalho\\PI_2022\\selettra_recruitament\\src\\App.js":"2","C:\\Users\\amilt\\OneDrive\\Área de Trabalho\\PI_2022\\selettra_recruitament\\src\\reportWebVitals.js":"3","C:\\Users\\amilt\\OneDrive\\Área de Trabalho\\PI_2022\\selettra_recruitament\\src\\Pages\\Cadastro.js":"4","C:\\Users\\amilt\\OneDrive\\Área de Trabalho\\PI_2022\\selettra_recruitament\\src\\Layout\\Header.js":"5","C:\\Users\\amilt\\OneDrive\\Área de Trabalho\\PI_2022\\selettra_recruitament\\src\\Services\\Api.js":"6","C:\\Users\\amilt\\OneDrive\\Área de Trabalho\\PI_2022\\selettra_recruitament\\src\\Pages\\Vagas.js":"7","C:\\Users\\amilt\\OneDrive\\Área de Trabalho\\PI_2022\\selettra_recruitament\\src\\Pages\\Candidatures.js":"8","C:\\Users\\amilt\\OneDrive\\Área de Trabalho\\PI_2022\\selettra_recruitament\\src\\Pages\\Home.js":"9"},{"size":501,"mtime":1661623057483,"results":"10","hashOfConfig":"11"},{"size":978,"mtime":1666457056496,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1660864353945,"results":"13","hashOfConfig":"11"},{"size":46427,"mtime":1664408523468,"results":"14","hashOfConfig":"11"},{"size":1095,"mtime":1664410524753,"results":"15","hashOfConfig":"11"},{"size":122,"mtime":1661007970460,"results":"16","hashOfConfig":"11"},{"size":14516,"mtime":1664656174577,"results":"17","hashOfConfig":"11"},{"size":22780,"mtime":1666825885506,"results":"18","hashOfConfig":"11"},{"size":7482,"mtime":1666829594477,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"mec6h0",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\amilt\\OneDrive\\Área de Trabalho\\PI_2022\\selettra_recruitament\\src\\index.js",[],["43","44"],"C:\\Users\\amilt\\OneDrive\\Área de Trabalho\\PI_2022\\selettra_recruitament\\src\\App.js",["45","46"],"import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport React, { useState, useRef } from 'react';\n\nimport 'primereact/resources/themes/saga-blue/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport 'primeflex/primeflex.css';\n\n/****Layouts*****/\nimport Header from './Layout/Header';\n/****Layouts*****/\n\n/***Impore from pages****/\nimport Home from './Pages/Home';\nimport Cadastro from './Pages/Cadastro'\nimport Vagas from './Pages/Vagas';\nimport Candidatures from './Pages/Candidatures'\n/***Impore from pages****/\n\nexport default function App() {\n\n  return (\n    <div className=\"App\">\n<Router>\n<Header/>\n          <Routes>\n          <Route exact path=\"/\" element={<Home/>}/>\n          <Route path=\"/cadastro\" element={<Cadastro/>}/>\n          <Route path=\"/vaga\" element={<Vagas/>}/>\n          <Route path=\"/candidaturas\" element={<Candidatures/>}/>\n          </Routes>\n    </Router>\n    </div>\n  );\n}","C:\\Users\\amilt\\OneDrive\\Área de Trabalho\\PI_2022\\selettra_recruitament\\src\\reportWebVitals.js",[],"C:\\Users\\amilt\\OneDrive\\Área de Trabalho\\PI_2022\\selettra_recruitament\\src\\Pages\\Cadastro.js",["47"],"import React, { useState, useEffect, useRef } from 'react';\r\n\r\nimport { classNames } from 'primereact/utils';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Button } from 'primereact/button';\r\nimport { Toolbar } from 'primereact/toolbar';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { InputMask } from 'primereact/inputmask';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport './DataTableDemo.css';\r\nimport axios from 'axios';\r\n\r\nconst DataTableCrudCandidato = () => {\r\n\r\n    let emptyCandidato = {\r\n        id: '',\r\n        nome: '',\r\n        idade: '',\r\n        sexo: '',\r\n        cpf: '',\r\n        rg: '',\r\n        nacionalidade: '',\r\n        estadocivil: '',\r\n        ativo: '',\r\n        dtcad: '',\r\n        usercad: ''\r\n    };\r\n\r\n    let emptyContato = {\r\n        id: \"\",\r\n        idcandidato:\"\",\r\n        tipo: \"\",\r\n        valor:\"\",\r\n        ativo: '',\r\n        dtcad: '',\r\n        usercad: ''\r\n    }\r\n\r\n    let emptyEndereco = {\r\n        id: \"\",\r\n        idcandidato:\"\",\r\n        cep: \"\",\r\n        rua:\"\",\r\n        numero:\"\",\r\n        bairro: '',\r\n        cidade: '',\r\n        estado: '',\r\n        pais: '',\r\n        complemento: '',\r\n        ativo: '',\r\n        usercad: '',\r\n        dtcad: '',\r\n        logradouro: '',\r\n    }\r\n\r\n    const [candidatos, setCandidatos] = useState(null);\r\n    const [contatos, setContatos] = useState(null);\r\n    const [endereco, setEndereco] = useState(emptyEndereco);\r\n    const [enderecos, setEnderecos] = useState(null);\r\n    const [candidatoDialog, setCandidatoDialog] = useState(false);\r\n    const [contatoDialog, setContatoDialog] = useState(false);\r\n    const [enderecoDialog, setEnderecoDialog] = useState(false);\r\n    const [verContatoDialog, setVerContatoDialog] = useState(false);\r\n    const [verEnderecoDialog, setVerEnderecoDialog] = useState(false);\r\n    const [deleteCandidatoDialog, setDeleteCandidatoDialog] = useState(false);\r\n    const [deleteContatoDialog, setDeleteContatoDialog] = useState(false);\r\n    const [deleteEnderecoDialog, setDeleteEnderecoDialog] = useState(false);\r\n    const [deleteCandidatosDialog, setDeleteCandidatosDialog] = useState(false);\r\n    const [candidato, setCandidato] = useState(emptyCandidato);\r\n    const [contato, setContato] = useState(emptyContato);\r\n    const [selectedCandidatos, setSelectedCandidatos] = useState(null);\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [submittedContato, setSubmittedContato] = useState(false);\r\n    const [submittedEndereco, setSubmittedEndereco] = useState(false);\r\n    const [globalFilter, setGlobalFilter] = useState(null);\r\n    const [selectedSexo, setSelectedSexo] = useState(null);\r\n    const [selectedTipoContato, setSelectedTipoContato] = useState(null);\r\n    const [selectedEstadoCivil, setSelectedEstadoCivil] = useState(null);\r\n    const [mostraInput, setMostraInput] = useState(false)\r\n    const [cardFile, setCardFile] = useState(null);\r\n    const [curriculumName, setCurriculumName] = useState(null);\r\n    const [mostraArquivos, setMostraArquivos] = useState(false)\r\n    const [arquivos, setArquivos]= useState(null)\r\n    const toast = useRef(null);\r\n    const dt = useRef(null);\r\n    const load = useRef(null);\r\n\r\n    const Api = axios.create({baseURL: 'http://localhost:8081/'});\r\n\r\n\r\n    const fetchAllcandidatos = ()=>{\r\n        load.current = true\r\n        async function getAll(){\r\n            const result = await Api.get(\"candidatos\")\r\n            if(result.data){\r\n                setCandidatos(result.data)\r\n            }\r\n        }\r\n        if(load.current){\r\n            getAll()\r\n        }\r\n        load.current = false;\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        fetchAllcandidatos()\r\n    },[]); \r\n\r\n\r\n    const fetchContatoscandidato = (id)=>{\r\n        load.current = true\r\n        async function getAll(){\r\n            const result = await Api.post(\"contatos/procurar\", {\r\n                idcandidato:parseInt(id)\r\n            })\r\n            if(result.data){\r\n                setContatos(result.data)\r\n            }\r\n        }\r\n        if(load.current){\r\n            getAll()\r\n        }\r\n        load.current = false;\r\n    }\r\n\r\n    const fetchEnderecocandidato = (id)=>{\r\n        load.current = true\r\n        async function getAll(){\r\n            const result = await Api.post(\"enderecos/procurar\", {\r\n                idcandidato:parseInt(id)\r\n            })\r\n            if(result.data){\r\n                setEnderecos(result.data)\r\n            }\r\n        }\r\n        if(load.current){\r\n            getAll()\r\n        }\r\n        load.current = false;\r\n    }\r\n\r\n    const newCandidatos=()=>{\r\n        load.current=true;\r\n        async function newCandidato(){\r\n            const result = await Api.post(\"candidatos\",{usercad: \"Usuário\"})\r\n            if(result.data){\r\n                candidato.id = result.data.id\r\n                setSubmitted(false);\r\n                setCandidatoDialog(true);\r\n            }\r\n        }\r\n        if(load.current){\r\n            newCandidato()\r\n        }\r\n        load.current=false\r\n    }\r\n\r\n    const newCandidatoConato=()=>{\r\n        load.current=true;\r\n        async function newCandidatoContato(){\r\n            const result = await Api.post(\"contatos\",{usercad: \"Usuário\"})\r\n            if(result.data){\r\n                contato.id = result.data.id\r\n                setContatoDialog(true);\r\n            }\r\n        }\r\n        if(load.current){\r\n            newCandidatoContato()\r\n        }\r\n        load.current=false\r\n    }\r\n\r\n    const newCandidatoEndereco=()=>{\r\n        load.current=true;\r\n        async function newCandidatoEndereco() {\r\n            const result = await Api.post(\"enderecos\",{usercad: \"Usuário\"})\r\n            if(result.data){\r\n                endereco.id = result.data.id\r\n                setEnderecoDialog(true);\r\n            }\r\n        }\r\n        if(load.current){\r\n            newCandidatoEndereco()\r\n        }\r\n        load.current=false\r\n    }\r\n\r\n    const saveDataCandidatos=(id)=>{\r\n        load.current = true\r\n        async function save(){\r\n            const result = await Api.post(`candidatos/${id}/atualizar`,\r\n            {id: id,\r\n                nome: candidato.nome,\r\n                idade: candidato.idade,\r\n                sexo: selectedSexo,\r\n                cpf: candidato.cpf,\r\n                rg: candidato.rg,\r\n                nacionalidade: candidato.nacionalidade,\r\n                estadocivil: selectedEstadoCivil})\r\n            if(result.data === true){\r\n                setCandidato(emptyCandidato);\r\n                setSubmitted(false);\r\n                setCandidatoDialog(false);\r\n                fetchAllcandidatos();\r\n                setSelectedEstadoCivil(null);\r\n                setSelectedSexo(null);\r\n                }\r\n        }\r\n        if(load.current){\r\n            save()\r\n        }\r\n        load.current =false\r\n    }\r\n    \r\n    const saveDataContatos=(id)=>{\r\n        load.current = true\r\n        async function save() {\r\n            let idcandidato =candidato.id\r\n            const result = await Api.post(`contatos/${id}/atualizar`,\r\n                {\r\n                    id: id,\r\n                    idcandidato: parseInt(idcandidato),\r\n                    tipo: selectedTipoContato,\r\n                    valor: contato.valor,\r\n                })\r\n            if(result.data === true){\r\n                setContato(emptyContato);\r\n                setContatoDialog(false);\r\n                fetchContatoscandidato(candidato.id);        \r\n                setSelectedTipoContato(null)\r\n            }\r\n        }\r\n        if(load.current){\r\n            save()\r\n        }\r\n        load.current =false\r\n    }\r\n\r\n    const saveDataEndereco =(id)=>{\r\n        load.current = true\r\n        async function save() {\r\n            let idcandidato =candidato.id\r\n            const result = await Api.post(`enderecos/${id}/atualizar`,\r\n                {\r\n                    id: id,\r\n                    idcandidato: parseInt(idcandidato),\r\n                    cep: endereco.cep,\r\n                    rua: endereco.rua,\r\n                    numero: endereco.numero,\r\n                    bairro: endereco.bairro,\r\n                    cidade: endereco.cidade,\r\n                    estado: endereco.estado,\r\n                    pais: endereco.pais,\r\n                    complemento: endereco.complemento,\r\n                })\r\n            if(result.data === true){\r\n                setEndereco(emptyEndereco);\r\n                setEnderecoDialog(false);\r\n                fetchEnderecocandidato(candidato.id);        \r\n            }\r\n        }\r\n        if(load.current){\r\n            save()\r\n        }\r\n        load.current =false\r\n    }\r\n\r\n    const dropCandidato=(id)=>{\r\n        load.current = true\r\n            async function drop(){\r\n                const response = await Api.post(`candidatos/${id}/excluir`,{\r\n                    id: parseInt(id)  \r\n                })\r\n            if(response.data === true){\r\n                fetchAllcandidatos()\r\n            }\r\n            }\r\n            if(load.current){\r\n                drop()\r\n            }\r\n        load.current =false\r\n    }\r\n\r\n    const dropCotato=(id)=>{\r\n        load.current = true\r\n            async function drop(){\r\n                const response = await Api.post(`contatos/${id}/excluir`,{\r\n                    id: parseInt(id)  \r\n                })\r\n            if(response.data === true){\r\n                fetchContatoscandidato(candidato.id)\r\n            }\r\n            }\r\n            if(load.current){\r\n                drop()\r\n            }\r\n        load.current =false\r\n    }\r\n\r\n    const dropEndereco =(id)=>{\r\n        load.current = true\r\n            async function drop(){\r\n                const response = await Api.post(`ederecos/${id}/excluir`,{\r\n                    id: parseInt(id)  \r\n                })\r\n            if(response.data === true){\r\n                fetchEnderecocandidato(candidato.id)\r\n            }\r\n            }\r\n            if(load.current){\r\n                drop()\r\n            }\r\n        load.current =false\r\n    }\r\n\r\n    const editEndereco =(dados)=>{\r\n        load.current = true\r\n        let id = dados.id\r\n            async function fetch(){\r\n                const response = await Api.get(`enderecos/${id}`,{\r\n                    id: id  \r\n                })\r\n            if(response.data){\r\n                setEndereco(response.data)\r\n                setEnderecoDialog(true)\r\n            }\r\n            }\r\n            if(load.current){\r\n                fetch()\r\n            }\r\n        load.current =false\r\n    }\r\n\r\n    const openNew = () => {\r\n        newCandidatos()\r\n    }\r\n\r\n    const newContato = () => {\r\n        newCandidatoConato()\r\n    }\r\n\r\n    const newEndereco = () => {\r\n        newCandidatoEndereco()\r\n    }\r\n\r\n    const hideDialog = () => {\r\n        setSubmitted(false);\r\n        setCandidatoDialog(false);\r\n        setSelectedSexo(null);\r\n        setSelectedEstadoCivil(null)\r\n        setContatos(null)\r\n        setCandidato(emptyCandidato)\r\n        setCardFile(null)\r\n        setCurriculumName(null)\r\n        setMostraArquivos(false)\r\n    }\r\n    \r\n    const hideVerContatos = () => {\r\n        setVerContatoDialog(false)\r\n    }\r\n  \r\n    const hideVerEnderecos = () => {\r\n        setVerEnderecoDialog(false)\r\n    }\r\n\r\n    const hideDialogContatos = () => {\r\n        setContatoDialog(false)\r\n        setSelectedTipoContato(null)\r\n    }\r\n\r\n    const hideDialogEndereco = () => {\r\n        setEnderecoDialog(false)\r\n    }\r\n\r\n    const hideDeleteCandidatoDialog = () => {\r\n        setDeleteCandidatoDialog(false);\r\n    }\r\n\r\n    const hideDeleteEnderecoDialog = () => {\r\n        setDeleteEnderecoDialog(false);\r\n    }\r\n\r\n    const hideDeleteCandidatosDialog = () => {\r\n        setDeleteCandidatosDialog(false);\r\n    }\r\n\r\n    const saveCandidato = () => {\r\n        setSubmitted(true);\r\n\r\n        if (candidato.nome.trim()) {\r\n            let _candidatos = [...candidatos];\r\n         \r\n            if (candidato.id) {\r\n                const index = findIndexById(candidato.id);\r\n                if(index >= 0){\r\n\r\n                    saveDataCandidatos(candidato.id)\r\n                    toast.current.show({ severity: 'success', summary: 'Sucesso', detail: 'Candidato Atualizado', life: 3000 });\r\n                }else{\r\n                    saveDataCandidatos(candidato.id)\r\n                    toast.current.show({ severity: 'success', summary: 'Sucesso', detail: 'Candidato Criado', life: 3000 });\r\n            }\r\n            setCandidato(emptyCandidato);\r\n        }\r\n\r\n            setCandidatos(_candidatos);\r\n            setCandidatoDialog(false);\r\n        }\r\n    }\r\n\r\n    const saveContato = () => {\r\n        setSubmittedContato(true);\r\n        if (contato.valor.trim()) {\r\n            saveDataContatos(contato.id)\r\n            toast.current.show({ severity: 'success', summary: 'Sucesso', detail: 'Contato Criado com sucesso!', life: 3000 });\r\n            setContato(emptyContato);\r\n        }\r\n    }\r\n\r\n    const saveEndereco = () => {\r\n        setSubmittedEndereco(true);\r\n        if (endereco.cep.trim()) {\r\n            saveDataEndereco(endereco.id)\r\n            toast.current.show({ severity: 'success', summary: 'Sucesso', detail: 'Endereço atualizado com sucesso!', life: 3000 });\r\n            setContato(emptyContato);\r\n        }\r\n    }\r\n\r\n    const editCandidato = (candidato) => {\r\n        setCandidato({...candidato});\r\n        setSelectedSexo(candidato.sexo);\r\n        fetchContatoscandidato(candidato.id)\r\n        fetchEnderecocandidato(candidato.id)\r\n        listFilesCandidatos(candidato.id)\r\n        setSelectedEstadoCivil(candidato.estadocivil)\r\n        setCandidatoDialog(true);\r\n    }\r\n\r\n    const confirmDeleteCandidato = (candidato) => {\r\n        setCandidato(candidato);\r\n        setDeleteCandidatoDialog(true);\r\n    }\r\n\r\n    const confirmDeleteContato = (contato) => {\r\n        setContato(contato);\r\n        setDeleteContatoDialog(true);\r\n    }\r\n\r\n    const confirmDeleteEndereco = (endereco) => {\r\n        setEndereco(endereco);\r\n        setDeleteEnderecoDialog(true);\r\n    }\r\n\r\n    const deleteCandidato = () => {\r\n        let _candidatos = candidatos.filter(val => val.id !== candidato.id);\r\n        let _removeCandidatos = candidatos.filter(val => val.id === candidato.id);\r\n        let id = _removeCandidatos[0].id\r\n        dropCandidato(id)\r\n        setCandidatos(_candidatos);\r\n        setDeleteCandidatoDialog(false);\r\n        setCandidato(emptyCandidato);\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Candidato Deleted', life: 3000 });\r\n    }\r\n\r\n    const findIndexById = (id) => {\r\n        let index = -1;\r\n        for (let i = 0; i < candidatos.length; i++) {\r\n            if (candidatos[i].id === id) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n   \r\n    const deleteContato = () => {\r\n        let _contatos = contatos.filter(val => val.id !== contato.id);\r\n        let _removeContato = contatos.filter(val => val.id === contato.id);\r\n        let id = _removeContato[0].id\r\n        dropCotato(id)\r\n        setContatos(_contatos);\r\n        setDeleteContatoDialog(false);\r\n        setContato(emptyContato);\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Contato Deletado', life: 3000 });\r\n    }\r\n\r\n    const deleteEndereco = () => {\r\n        let _enderecos = enderecos.filter(val => val.id !== endereco.id);\r\n        let _removeEndereco = enderecos.filter(val => val.id === endereco.id);\r\n        let id = _removeEndereco[0].id\r\n        dropEndereco(id)\r\n        setEnderecos(_enderecos);\r\n        setDeleteEnderecoDialog(false);\r\n        setEndereco(emptyEndereco);\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Endereço Deletado', life: 3000 });\r\n    }\r\n\r\n    const confirmDeleteSelected = () => {\r\n        setDeleteCandidatosDialog(true);\r\n    }\r\n\r\n    const deleteSelectedCandidatos = () => {\r\n        let _candidatos = candidatos.filter(val => !selectedCandidatos.includes(val));\r\n        Array.from(selectedCandidatos).forEach((val)=>{\r\n            dropCandidato(val.id)\r\n        })\r\n        setCandidatos(_candidatos);\r\n        setDeleteCandidatosDialog(false);\r\n        setSelectedCandidatos(null);\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Candidatos Deleted', life: 3000 });\r\n    }\r\n\r\n\r\n    const onInputChange = (e, name) => {\r\n        const val = (e.target && e.target.value) || '';\r\n        let _candidato = {...candidato};\r\n        _candidato[`${name}`] = val;\r\n\r\n        setCandidato(_candidato);\r\n    }\r\n\r\n    const onInputChangeContato = (e, name) => {\r\n        const val = (e.target && e.target.value) || '';\r\n        let _contato = {...contato};\r\n        _contato[`${name}`] = val;\r\n\r\n        setContato(_contato);\r\n    }\r\n\r\n    const onInputChangeEndereco = (e, name) => {\r\n        const val = (e.target && e.target.value) || '';\r\n        let _endereco = {...endereco};\r\n        _endereco[`${name}`] = val;\r\n        if (name === 'cep' && val.length > 8) {\r\n            consultarCEP(endereco,e.target.value)\r\n        }\r\n        setEndereco(_endereco);\r\n    }\r\n\r\n    const carregaInputContato = (e) => {\r\n        setSelectedTipoContato(e)\r\n        tipoDeInputValorContato(e)\r\n    }\r\n\r\n\r\n    const tipoDeInputValorContato = (tipo) => {\r\n        switch (tipo) {\r\n            case \"Telefone\":\r\n                setMostraInput(true)\r\n                break\r\n            case \"WhatsApp\":\r\n                setMostraInput(true)\r\n                break;\r\n            case \"E-mail\":\r\n                setMostraInput(false)\r\n                break;\r\n            default:\r\n                setMostraInput(false)\r\n        }            \r\n    }\r\n\r\n    const leftToolbarTemplate = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <Button label=\"Novo\" icon=\"pi pi-plus\" className=\"p-button-success mr-2\" onClick={openNew} />\r\n                <Button label=\"Deletar\" icon=\"pi pi-trash\" className=\"p-button-danger\" onClick={confirmDeleteSelected} disabled={!selectedCandidatos || !selectedCandidatos.length} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const leftToolbarTemplateContatos = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <Button icon=\"pi pi-plus\" className=\"p-button p-button-success p-button-outlined w-full\" label=\"Novo\" onClick={newContato} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const leftToolbarTemplateEndereco = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <Button icon=\"pi pi-plus\" className=\"p-button p-button-success p-button-outlined w-full\" label=\"Novo\" onClick={newEndereco} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    const actionBodyTemplate = (rowData) => {\r\n        return (\r\n            <React.Fragment>\r\n                <Button icon=\"pi pi-pencil\" className=\"p-button-rounded p-button-success mr-2\" onClick={() => editCandidato(rowData)} />\r\n                <Button icon=\"pi pi-trash\" className=\"p-button-rounded p-button-warning\" onClick={() => confirmDeleteCandidato(rowData)} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const actionBodyTemplateConatatos = (rowData) => {\r\n        return (\r\n            <React.Fragment>\r\n                <Button icon=\"pi pi-times\" className=\"p-button w-4 h-3 p-button-danger p-button-outlined\" onClick={() => confirmDeleteContato(rowData)} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const actionBodyTemplateEndereco = (rowData) => {\r\n        return (\r\n            <React.Fragment>\r\n                <Button icon=\"pi pi-pencil\" className=\"p-button w-4 h-3 p-button-danger p-button-outlined\" onClick={() => editEndereco(rowData)} />\r\n                <Button icon=\"pi pi-times\" className=\"p-button w-4 h-3 p-button-danger p-button-outlined\" onClick={() => confirmDeleteEndereco(rowData)} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const actionBodyTemplateAnexos = (rowData) => {\r\n        return (\r\n            <React.Fragment>\r\n                <Button icon=\"pi pi-download\" className=\"p-button w-6 p-button-success p-button-outlined\" onClick={() => baixarAnexo(rowData)} />\r\n                <Button icon=\"pi pi-times\" className=\"p-button w-6 p-button-danger p-button-outlined\" onClick={() => deletarAnexos(rowData)} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n\r\n    const header = (\r\n        <div className=\"table-header\">\r\n            <h5 className=\"mx-0 my-1\">Candidatos Cadastrados</h5>\r\n            <span className=\"p-input-icon-left\">\r\n                <i className=\"pi pi-search\" />\r\n                <InputText type=\"search\" onInput={(e) => setGlobalFilter(e.target.value)} placeholder=\"Search...\" />\r\n            </span>\r\n        </div>\r\n    );\r\n    \r\n    const headerContatos = (\r\n        <div className=\"table-header\">\r\n            <h5 className=\"mx-0 my-1\">Contatos</h5>\r\n        </div>\r\n    );\r\n\r\n    const candidatoDialogFooter = (\r\n        <React.Fragment>\r\n            <div className=\"grid text-center\">\r\n                <div className=\"col-12 md:col-6 lg:col-1\"></div>\r\n                <div className=\"col-12 md:col-6 lg:col-4\">\r\n                    <Button className=\"p-button-warning\" label=\"Ver dados de Contatos\" onClick={()=>setVerContatoDialog(true)}/>\r\n                </div>\r\n                <div className=\"col-12 md:col-6 lg:col-4\">\r\n                    <Button className=\"p-button-primary\" label=\"Ver dados de Endereço\" onClick={()=>setVerEnderecoDialog(true)}/>\r\n                </div>\r\n                </div>\r\n            <div className=\"grid text-center\">\r\n                <div className=\"col-12 md:col-12 lg:col-12\">\r\n                    <Button label=\"Cancelar\" icon=\"pi pi-times\"\r\n                    className=\"p-button-text\" onClick={hideDialog} />\r\n                    <Button label=\"Salvar\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={saveCandidato} />\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n\r\n    const contatoDialogFooter = (\r\n        <React.Fragment>\r\n            <div className=\"flex justify-content-center\">\r\n                <Button label=\"Cancelar\" icon=\"pi pi-times\"         className=\"p-button-text\" onClick={hideDialogContatos} />\r\n                <Button label=\"Salvar\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={saveContato} />\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n\r\n    const enderecoDialogFooter = (\r\n        <React.Fragment>\r\n            <div className=\"flex justify-content-center\">\r\n                <Button label=\"Cancelar\" icon=\"pi pi-times\"         className=\"p-button-text\" onClick={hideDialogEndereco} />\r\n                <Button label=\"Salvar\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={saveEndereco} />\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n\r\n    const deleteCandidatoDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"Não\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteCandidatoDialog} />\r\n            <Button label=\"Sim\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={deleteCandidato} />\r\n        </React.Fragment>\r\n    );\r\n    \r\n    const deleteContatoDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"Não\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteCandidatoDialog} />\r\n            <Button label=\"Sim\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={deleteContato} />\r\n        </React.Fragment>\r\n    );\r\n\r\n    const deleteEnderecoDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"Não\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteCandidatoDialog} />\r\n            <Button label=\"Sim\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={deleteEndereco} />\r\n        </React.Fragment>\r\n    );\r\n\r\n    const deleteCandidatosDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"Não\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteCandidatosDialog} />\r\n            <Button label=\"Sim\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={deleteSelectedCandidatos} />\r\n        </React.Fragment>\r\n    );\r\n\r\n    const sexoOpcoes=[\r\n        {name:\"Femenino\", value:\"Femenino\"},\r\n        {name:\"Masculino\", value:\"Masculino\"},\r\n    ]\r\n\r\n    const estadoCivilOpcoes=[\r\n        {name:\"Casado\", value:\"Casado\"},\r\n        {name:\"Solteiro\", value:\"Solteiro\"},\r\n        {name:\"Divorciado\", value:\"Divorciado\"},\r\n        {name:\"Viuvo(a)\", value:\"Viuvo(a)\"},\r\n    ]\r\n\r\n    const tiposContatosOpcoes=[\r\n        {name:\"E-mail\", value:\"E-mail\"},\r\n        {name:\"Telefone\", value:\"Telefone\"},\r\n        {name:\"WhatsApp\", value:\"WhatsApp\"},\r\n    ]\r\n\r\n    \r\n    const handleUploadFile = (e) => {\r\n        setCardFile(e.target.files[0])\r\n        setCurriculumName(e.target.files[0].name)\r\n    };\r\n    \r\n    const removeArq = () => {\r\n        setCardFile(null)\r\n        setCurriculumName(null)\r\n    }\r\n\r\n\r\n      const saveFile = async (id) => {\r\n        load.current = true\r\n        async function save() {\r\n            const response = await Api.post(`/anexos/${id}/atualizar`, {\r\n                id: id,\r\n                idcandidato: candidato.id,\r\n            })\r\n            if (response.data === true) {\r\n                setCardFile(null)\r\n                setCurriculumName(null)\r\n                listFilesCandidatos(candidato.id)\r\n            }\r\n        }\r\n        if (load.current) {\r\n            save()\r\n        }\r\n        load.current =false\r\n      };\r\n    \r\n\r\n    const addNewCard = () => {\r\n        load.current = true\r\n        const arquivo = new FormData();\r\n        arquivo.append(\"file\", cardFile);\r\n        async function save() {\r\n            const response = await Api.post(\"anexos/uploads\",arquivo)\r\n            if (response.data !== null) {\r\n                saveFile(response.data)\r\n            }\r\n        }\r\n\r\n        if(load.current){save()}\r\n\r\n        load.current =false\r\n      };\r\n\r\n    const listFilesCandidatos = (id) => {\r\n        load.current = true;\r\n        async function list() {\r\n            const result = await Api.post(\"/anexos/procurar\", { \r\n                idcandidato: parseInt(id)\r\n            })\r\n            if (result.data.length > 0) {\r\n                setArquivos(result.data)\r\n                setMostraArquivos(true)\r\n            } else {\r\n                setArquivos(null)\r\n            }\r\n        }\r\n        if (load.current) {\r\n            list()\r\n        }\r\n        load.current=false\r\n    }\r\n\r\n    const baixarAnexo = (dados) => {\r\n        load.current = true;\r\n        async function baixar() { \r\n            let fileName = dados.nomeoriginal;\r\n            let id = dados.id;\r\n            Promise.all(\r\n                [ await Api.get(\"anexos/\" + id + \"/anexodownload\", { responseType: 'blob'})]\r\n                ).then((response) => response[0].data\r\n                ).then(blob => {\r\n                    var file = window.URL.createObjectURL(blob);               \r\n                    var fileLink = document.createElement('a');\r\n                    fileLink.href = file;\r\n                    fileLink.download = fileName;\r\n                    fileLink.click();      \r\n                });                                  \r\n        }\r\n        if (load.current) {\r\n            baixar();\r\n        }\r\n        load.current = false;\r\n\r\n    }\r\n\r\n    const deletarAnexos = (dados) => {\r\n        load.current = true;\r\n        async function deleteAnexo() { \r\n            let id = dados.id;\r\n            const response = await Api.post(`anexos/${id}/excluir`, {\r\n                id:parseInt(id)});\r\n            if (response.data === true) {\r\n               listFilesCandidatos(candidato.id)\r\n           } \r\n        }\r\n        if (load.current) {\r\n            deleteAnexo();\r\n        }\r\n        load.current = false;\r\n\r\n    }\r\n\r\n    const consultarCEP = (dados,cep) => {\r\n        load.current = true;\r\n        async function consultar() {\r\n            const response = await Api.get(`https://viacep.com.br/ws/${cep}/json/`)\r\n            if (response.data) {\r\n                endereco.id = dados.id;\r\n                endereco.cep = cep;\r\n                endereco.rua = response.data.logradouro;\r\n                endereco.bairro = response.data.bairro;\r\n                endereco.cidade = response.data.localidade;\r\n                endereco.estado = response.data.uf;\r\n                setEndereco(endereco);\r\n                document.querySelector('#rua').readOnly = true;\r\n                document.querySelector('#bairro').readOnly = true;\r\n                document.querySelector('#cidade').readOnly = true;\r\n                document.querySelector('#estado').readOnly = true;\r\n                document.querySelector('#pais').readOnly = true;\r\n            }\r\n        }\r\n        if (load.current) {\r\n            consultar();\r\n        }\r\n        load.current =false\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"datatable-crud\">\r\n            <Toast ref={toast} />\r\n\r\n\r\n            <div className=\"card\">\r\n                <Toolbar className=\"mb-4\" left={leftToolbarTemplate}></Toolbar>\r\n\r\n                <DataTable ref={dt} value={candidatos} selection={selectedCandidatos} onSelectionChange={(e) => setSelectedCandidatos(e.value)}\r\n                    dataKey=\"id\" paginator rows={10} rowsPerPageOptions={[5, 10, 25]}\r\n                    paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n                    currentPageReportTemplate=\"Vendo de {first} a {last} de {totalRecords} candidatos\"\r\n                    globalFilter={globalFilter} header={header} responsiveLayout=\"scroll\">\r\n                    <Column selectionMode=\"multiple\" headerStyle={{ width: '3rem' }} exportable={false}></Column>\r\n                    <Column field=\"id\" header=\"Code\" sortable style={{ minWidth: '12rem' }}></Column>\r\n                    <Column field=\"nome\" header=\"Nome\" sortable style={{ minWidth: '16rem' }}></Column>\r\n                    <Column field=\"idade\" header=\"Idade\" sortable style={{ minWidth: '16rem' }}></Column>\r\n                    <Column field=\"sexo\" header=\"Sexo\" sortable style={{ minWidth: '16rem' }}></Column>\r\n                    <Column header=\"Ações\" body={actionBodyTemplate} exportable={false} style={{ minWidth: '8rem' }}></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <Dialog visible={candidatoDialog} style={{ width: '90%' }} header=\"Candidato Detalhes\" modal className=\"p-fluid card\" footer={candidatoDialogFooter} onHide={hideDialog}>\r\n                \r\n                <div className=\"grid card\">\r\n                <div className=\"col-12 md:col-6 lg:col-4\">\r\n                    <label htmlFor=\"nome\">Nome</label>\r\n                    <InputText id=\"nome\" value={candidato.nome} onChange={(e) => onInputChange(e, 'nome')} required autoFocus className=\"p-inputtext\t\" />\r\n                    {submitted && !candidato.nome && <small className=\"p-error\">Name is required.</small>}\r\n                </div>\r\n                <div className=\"col-12 md:col-6 lg:col-1\">\r\n                    <label htmlFor=\"idade\">Idade</label>\r\n                    <InputText type=\"number\" id=\"idade\" value={candidato.idade} onChange={(e) => onInputChange(e, 'idade')} required autoFocus className={classNames({ 'p-invalid': submitted && !candidato.idade })} />\r\n                    {submitted && !candidato.idade && <small className=\"p-error\">IDADE is required.</small>}\r\n                </div>\r\n                <div className=\"col-12 md:col-6 lg:col-2\">\r\n                    <label htmlFor=\"sexo\">Sexo</label>\r\n                    <Dropdown value={selectedSexo} options={sexoOpcoes} onChange={(e)=>setSelectedSexo(e.value)} optionLabel=\"name\" className={classNames({ 'p-invalid': submitted && !selectedSexo })}/>\r\n                    {submitted && !selectedSexo && <small className=\"p-error\">IDADE is required.</small>}\r\n                </div>\r\n                <div className=\"col-12 md:col-6 lg:col-2\">\r\n                    <label htmlFor=\"cpf\">CPF</label>\r\n                    <InputMask mask=\"999.999.999-99\" value={candidato.cpf} onChange={(e) => onInputChange(e, 'cpf')} required autoFocus className={classNames({ 'p-invalid': submitted && !candidato.cpf })}></InputMask>\r\n                    {submitted && !candidato.cpf && <small className=\"p-error\">CPF is required.</small>}\r\n                </div>\r\n                <div className=\"col-12 md:col-6 lg:col-2\">\r\n                    <label htmlFor=\"rg\">RG</label>\r\n                    <InputMask mask=\"99.999.999-9\" value={candidato.rg} onChange={(e) => onInputChange(e, 'rg')} required autoFocus className={classNames({ 'p-invalid': submitted && !candidato.rg })}></InputMask>\r\n                    {submitted && !candidato.rg && <small className=\"p-error\">RG is required.</small>}\r\n                </div>\r\n                <div className=\"col-12 md:col-6 lg:col-3\">\r\n                    <label htmlFor=\"nacionalidade\">Nacionalidade</label>\r\n                    <InputText id=\"nacionalidade\" value={candidato.nacionalidade} onChange={(e) => onInputChange(e, 'nacionalidade')} required autoFocus className={classNames({ 'p-invalid': submitted && !candidato.nacionalidade })} />\r\n                    {submitted && !candidato.nacionalidade && <small className=\"p-error\">NACIONALIDADE is required.</small>}\r\n                </div>\r\n                <div className=\"col-12 md:col-6 lg:col-2\">\r\n                    <label htmlFor=\"estadocivil\">Estado Civil</label>\r\n                    <Dropdown value={selectedEstadoCivil} options={estadoCivilOpcoes} onChange={(e)=>setSelectedEstadoCivil(e.value)} optionLabel=\"name\" className={classNames({ 'p-invalid': submitted && !selectedEstadoCivil })}/>\r\n                    {submitted && !selectedSexo && <small className=\"p-error\">Estado Civil is required.</small>}\r\n                    </div>\r\n                    <div className=\"col-12 md:col-6 lg:col-6\">\r\n                    <label className=\"labelarq\" for=\"arquivo\">Enviar Arquivos</label>\r\n                        <input type=\"file\" name=\"arquivo\" id=\"arquivo\" onChange={handleUploadFile} class=\"arquivo\" />\r\n                        {curriculumName ? (<div className=\"grid\">\r\n                            <div className=\"col-12 md:col-6 lg:col-6\">\r\n                            <small className=\"text-green-500 font-italic\">{curriculumName}\r\n                        </small>\r\n                            </div>\r\n                            <div className=\"col-12 md:col-6 lg:col-1\">\r\n                            <Button className=\"p-button-text p-button-sm\" icon=\"pi pi-times\" onClick={removeArq} />\r\n                            </div>\r\n                            <div className=\"col-12 md:col-6 lg:col-1\">\r\n                            <Button className=\"p-button-text p-button-sm\" icon=\"pi pi-save\" onClick={addNewCard} />\r\n                            </div>\r\n                        </div>) : (<small className=\"p-error font-italic\">Nenhum arquivo selecionado!</small>)}\r\n                        \r\n                        {mostraArquivos ? (<>\r\n                            <DataTable value={arquivos}>\r\n                                <Column field=\"nomeoriginal\" className=\"text-center\" header=\"Nome\"></Column>\r\n                                <Column header=\"Baixar\" className=\"text-center\" body={actionBodyTemplateAnexos}></Column>\r\n                        </DataTable>\r\n                        </>) : (<></>)}\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <Dialog visible={deleteCandidatoDialog} style={{ width: '450px' }} header=\"Confirmação\" modal footer={deleteCandidatoDialogFooter} onHide={hideDeleteCandidatoDialog}>\r\n                <div className=\"confirmation-content\">\r\n                    <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem'}} />\r\n                    {candidato && <span>Tem certeza de que deseja excluir?</span>}\r\n                </div>\r\n            </Dialog>\r\n         \r\n            <Dialog visible={deleteContatoDialog} style={{ width: '450px' }} header=\"Confirmação\" modal footer={deleteContatoDialogFooter} onHide={hideDeleteCandidatoDialog}>\r\n                <div className=\"confirmation-content\">\r\n                    <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem'}} />\r\n                    {contato && <span>Tem certeza de que deseja excluir?</span>}\r\n                </div>\r\n            </Dialog>\r\n         \r\n            <Dialog visible={deleteEnderecoDialog} style={{ width: '450px' }} header=\"Confirmação\" modal footer={deleteEnderecoDialogFooter} onHide={hideDeleteEnderecoDialog}>\r\n                <div className=\"confirmation-content\">\r\n                    <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem'}} />\r\n                    {endereco && <span>Tem certeza de que deseja excluir?</span>}\r\n                </div>\r\n            </Dialog>\r\n\r\n            <Dialog visible={deleteCandidatosDialog} style={{ width: '450px' }} header=\"Confirmação\" modal footer={deleteCandidatosDialogFooter} onHide={hideDeleteCandidatosDialog}>\r\n                <div className=\"confirmation-content\">\r\n                    <i className=\"pi pi-exclamation-triangle mr-3\" style={{fontSize: '2rem'}} />\r\n                    {candidato && <span>Tem certeza de que deseja excluir os candidatos selecionados?</span>}\r\n                </div>\r\n            </Dialog>\r\n\r\n            {/* Contatos dialog */}\r\n            <Dialog visible={contatoDialog} style={{ width: '50%' }} header={`Detalhes contatos de ${candidato.nome}`} modal className=\"p-fluid card\" footer={contatoDialogFooter} onHide={hideDialogContatos}>\r\n                \r\n                <div className=\"grid card flex justify-content-center\">\r\n                    <div className=\"col-4 md:col-6 lg:col-4\">\r\n                        <label htmlFor=\"tipo\">Tipo</label>\r\n                        <Dropdown value={selectedTipoContato} options={tiposContatosOpcoes} onChange={(e)=>carregaInputContato(e.value)} optionLabel=\"name\" className={classNames({ 'p-invalid': submittedContato && !selectedTipoContato })}/>\r\n                    {submittedContato && !selectedTipoContato && <small className=\"p-error\">Por favor selecione um tipo</small>}\r\n                    </div>\r\n                    <div className=\"col-6 md:col-6 lg:col-6\">\r\n                        <label htmlFor=\"valor\">Valor</label>\r\n                                {mostraInput ? ( <><InputMask id=\"valor\" mask=\"(99) 9 9999-9999\" type=\"text\" placeholder=\"(99) 9 9999-9999\" value={contato.valor} onChange={(e) => onInputChangeContato(e, 'valor')} className={classNames({ 'p-invalid': submittedContato && !contato.valor})} />\r\n                                {submittedContato && !contato.valor && <small className=\"p-error\">Por favor insira um número.</small>}</>):( <><InputText id=\"valor\" placeholder=\"exemple@email.com\" type=\"email\" value={contato.valor} onChange={(e) => onInputChangeContato(e, 'valor')} className={classNames({ 'p-invalid': submittedContato && !contato.valor})} />\r\n                                {submittedContato && !contato.valor && <small className=\"p-error\">Por favor insira um e-mail válido.</small>}</>)}\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <Dialog visible={verContatoDialog} style={{ width: '90%' }} header={`Contatos de ${candidato.nome}`} modal className=\"p-fluid card\" onHide={hideVerContatos}>\r\n\r\n                <div className=\"grid card flex justify-content-center\">\r\n                <div className=\"grid \">\r\n                <div className=\"col-12 md:col-12 lg:col-12\">\r\n                <div className=\"datatable-crud\">\r\n                    <div className=\"card\">\r\n                    <Toolbar left={leftToolbarTemplateContatos}></Toolbar>\r\n                    <DataTable value={contatos} selection                     dataKey=\"id\"  header={headerContatos} responsiveLayout=\"scroll\">\r\n                        <Column field=\"tipo\" header=\"Tipo\"></Column>\r\n                        <Column field=\"valor\" header=\"Contato\"></Column>\r\n                        <Column body={actionBodyTemplateConatatos} header=\"Excluir\"></Column>\r\n                    </DataTable>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n             </div>\r\n                </div>\r\n            </Dialog>\r\n\r\n\r\n            {/* Contatos dialog */}\r\n\r\n            {/* Endereço dialog */}\r\n            <Dialog visible={enderecoDialog} style={{ width: '90%' }} header={`Dados de endereco ${candidato.nome}`} modal className=\"p-fluid card\" footer={enderecoDialogFooter} onHide={hideDialogEndereco}>\r\n                \r\n                <div className=\"grid card flex justify-content-center\">\r\n                    <div className=\"col-6 md:col-6 lg:col-6\">\r\n                        <label htmlFor=\"cep\">CEP</label>\r\n                                <InputMask id=\"cep\" mask=\"99999-999\" type=\"text\" placeholder=\"Insira o CEP\" value={endereco.cep} onChange={(e) => onInputChangeEndereco(e, 'cep')} className={classNames({'p-invalid': submittedEndereco && !endereco.cep})} />\r\n                                {submittedEndereco && !endereco.cep && <small className=\"p-error\">Por favor insira um CEP.</small>}\r\n                    </div>\r\n                    <div className=\"col-12 md:col-6 lg:col-6\">\r\n                        <label htmlFor=\"rua\">Rua</label>\r\n                                <InputText id=\"rua\" placeholder=\"Nome da rua\" value={endereco.rua} onChange={(e) => onInputChangeEndereco(e, 'rua')} className={classNames({ 'p-invalid': submittedEndereco && !endereco.rua})} />\r\n                                {submittedEndereco && !endereco.rua && <small className=\"p-error\">Por favor insira um CEP.</small>}\r\n                    </div>\r\n                    <div className=\"col-12 md:col-6 lg:col-6\">\r\n                        <label htmlFor=\"numero\">Número</label>\r\n                                <InputText id=\"numero\" placeholder=\"Número\" value={endereco.numero} onChange={(e) => onInputChangeEndereco(e, 'numero')} />\r\n                    </div>\r\n                    <div className=\"col-12 md:col-6 lg:col-6\">\r\n                        <label htmlFor=\"bairro\">Bairro</label>\r\n                                <InputText id=\"bairro\" placeholder=\"Nome do bairro\" value={endereco.bairro} onChange={(e) => onInputChangeEndereco(e, 'bairro')} className={classNames({ 'p-invalid': submittedEndereco && !endereco.bairro})} />\r\n                                {submittedEndereco && !endereco.bairro && <small className=\"p-error\">Por favor informe o nome do Bairro.</small>}\r\n                    </div>\r\n                    <div className=\"col-12 md:col-6 lg:col-6\">\r\n                        <label htmlFor=\"cidade\">Cidade</label>\r\n                                <InputText id=\"cidade\" placeholder=\"Nome da cidade\" value={endereco.cidade} onChange={(e) => onInputChangeEndereco(e, 'cidade')} className={classNames({ 'p-invalid': submittedEndereco && !endereco.cidade})} />\r\n                                {submittedEndereco && !endereco.cidade && <small className=\"p-error\">Por favor informe o nome da cidade.</small>}\r\n                    </div>  <div className=\"col-12 md:col-6 lg:col-6\">\r\n                        <label htmlFor=\"estado\">Estado</label>\r\n                                <InputText id=\"estado\" placeholder=\"Insira o estado\" value={endereco.estado} onChange={(e) => onInputChangeEndereco(e, 'estado')} className={classNames({ 'p-invalid': submittedEndereco && !endereco.estado})} />\r\n                                {submittedEndereco && !endereco.estado && <small className=\"p-error\">Por favor informe o nome do estado.</small>}\r\n                    </div>\r\n                    <div className=\"col-12 md:col-6 lg:col-6\">\r\n                        <label htmlFor=\"pais\">Pais</label>\r\n                                <InputText id=\"pais\" placeholder=\"Insira o nome do pais\" value={endereco.pais} onChange={(e) => onInputChangeEndereco(e, 'pais')} />\r\n                    </div>\r\n                    <div className=\"col-12 md:col-6 lg:col-6\">\r\n                        <label htmlFor=\"complemento\">Complemento</label>\r\n                                <InputText id=\"complemento\" placeholder=\"Complementos\" value={endereco.complemento} onChange={(e) => onInputChangeEndereco(e, 'complemento')} />\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n            \r\n            <Dialog visible={verEnderecoDialog} style={{ width: '90%' }} header={`Endereco de ${candidato.nome}`} modal className=\"p-fluid card\" onHide={hideVerEnderecos}>\r\n\r\n                <div className=\"grid card flex justify-content-center\">\r\n                <div className=\"grid \">\r\n                <div className=\"col-12 md:col-12 lg:col-12\">\r\n                <div className=\"datatable-crud\">\r\n                    <div className=\"card\">\r\n                    <Toolbar left={leftToolbarTemplateEndereco}></Toolbar>\r\n                    <DataTable value={enderecos} selection                     dataKey=\"id\"  header={hideVerEnderecos} responsiveLayout=\"scroll\">\r\n                        <Column field=\"cep\" header=\"CEP\"></Column>\r\n                        <Column field=\"rua\" header=\"Rua\"></Column>\r\n                        <Column field=\"numero\" header=\"Número\"></Column>\r\n                        <Column field=\"complemento\" header=\"Complemento\"></Column>\r\n                        <Column field=\"bairro\" header=\"Bairro\"></Column>\r\n                        <Column field=\"cidade\" header=\"Cidade\"></Column>\r\n                        <Column field=\"estado\" header=\"Estado\"></Column>\r\n                        <Column field=\"pais\" header=\"Pais\"></Column>\r\n                        <Column body={actionBodyTemplateEndereco} header=\"Ações\"></Column>\r\n                    </DataTable>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n             </div>\r\n                </div>\r\n            </Dialog>\r\n\r\n            {/* Endereço dialog */}\r\n        \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function Cadastro() {\r\n    return <div className=\"card\">\r\n        <div className=\"card text-center\"><h3>Cadastro de Candidatos</h3></div>\r\n        <DataTableCrudCandidato/>\r\n    </div>\r\n}","C:\\Users\\amilt\\OneDrive\\Área de Trabalho\\PI_2022\\selettra_recruitament\\src\\Layout\\Header.js",[],"C:\\Users\\amilt\\OneDrive\\Área de Trabalho\\PI_2022\\selettra_recruitament\\src\\Services\\Api.js",[],"C:\\Users\\amilt\\OneDrive\\Área de Trabalho\\PI_2022\\selettra_recruitament\\src\\Pages\\Vagas.js",["48","49","50"],"\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { classNames } from 'primereact/utils';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Button } from 'primereact/button';\r\nimport { Toolbar } from 'primereact/toolbar';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { InputTextarea } from 'primereact/inputtextarea'\r\nimport { InputNumber} from 'primereact/inputnumber';\r\nimport './DataTableDemo.css';\r\nimport axios from 'axios';\r\n\r\nconst DataTableCrudVaga = () => {\r\n\r\n    let emptyVaga = {\r\n        id: null,\r\n        dtcad: 0,\r\n        usercad: 0,\r\n        ativo: 0,\r\n        nome: '',\r\n        descricao: null,\r\n        salario: '',\r\n        setor: null,\r\n        dtfechamento: \"\",\r\n        dtabertura:\"\"\r\n    };\r\n\r\n    const [vagas, setVagas] = useState(null);\r\n    const [vagaDialog, setVagaDialog] = useState(false);\r\n    const [deleteVagaDialog, setDeleteVagaDialog] = useState(false);\r\n    const [deleteVagasDialog, setDeleteVagasDialog] = useState(false);\r\n    const [vaga, setVaga] = useState(emptyVaga);\r\n    const [selectedVagas, setSelectedVagas] = useState(null);\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [globalFilter, setGlobalFilter] = useState(null);\r\n    const toast = useRef(null);\r\n    const dt = useRef(null);\r\n    const load = useRef(null\r\n    );\r\n    const Api = axios.create({baseURL: 'http://localhost:8081/'});\r\n\r\n\r\n    useEffect(() => {\r\n        fetchAll();\r\n    }, []);\r\n\r\n    const fetchAll = () => {\r\n        load.current = true;\r\n        async function fetchAll() {\r\n            const result = await Api.get(\"vagas\")\r\n            if (result.data) {\r\n                setVagas(result.data)\r\n            }\r\n        }\r\n        if (load.current) {\r\n            fetchAll();\r\n        }\r\n        load.current = false;\r\n    }\r\n\r\n    const newVagas =()=>{\r\n        load.current=true;\r\n        async function newVaga(){\r\n            const result = await Api.post(\"vagas\",{usercad: \"Usuário\"})\r\n            if(result.data){\r\n                vaga.id = result.data.id\r\n                setSubmitted(false);\r\n                setVagaDialog(true);\r\n            }\r\n        }\r\n        if(load.current){\r\n            newVaga()\r\n        }\r\n        load.current=false\r\n    }\r\n\r\n    const saveDataVagas=(id)=>{\r\n        load.current = true\r\n        async function save(){\r\n            const result = await Api.post(`vagas/${id}/atualizar`,\r\n            {id: id,\r\n                nome: vaga.nome,\r\n                setor: vaga.setor,\r\n                descricao: vaga.descricao,\r\n                dtabertura: vaga.dtabertura,\r\n                dtfechamento: vaga.dtfechamento,\r\n                salario: vaga.salario,\r\n                })\r\n            if(result.data === true){\r\n                setVaga(emptyVaga);\r\n                setSubmitted(false);\r\n                setVagaDialog(false);\r\n                fetchAll();\r\n                }\r\n        }\r\n        if(load.current){\r\n            save()\r\n        }\r\n        load.current =false\r\n    }\r\n\r\n    const dropVaga=(id)=>{\r\n        load.current = true\r\n            async function drop(){\r\n                const response = await Api.post(`vagas/${id}/excluir`,{\r\n                    id: parseInt(id)  \r\n                })\r\n            if(response.data === true){\r\n                fetchAll()\r\n            }\r\n            }\r\n            if(load.current){\r\n                drop()\r\n            }\r\n        load.current =false\r\n    }\r\n\r\n    const openNew = () => {\r\n        newVagas()\r\n    }\r\n\r\n    const hideDialog = () => {\r\n        setSubmitted(false);\r\n        setVagaDialog(false);\r\n    }\r\n\r\n    const hideDeleteVagaDialog = () => {\r\n        setDeleteVagaDialog(false);\r\n    }\r\n\r\n    const hideDeleteVagasDialog = () => {\r\n        setDeleteVagasDialog(false);\r\n    }\r\n\r\n    const saveVaga = () => {\r\n        setSubmitted(true);\r\n\r\n        if (vaga.nome.trim()) {\r\n            let _vagas = [...vagas];\r\n         \r\n            if (vaga.id) {\r\n                const index = findIndexById(vaga.id);\r\n                if(index >= 0){\r\n\r\n                    saveDataVagas(vaga.id)\r\n                    toast.current.show({ severity: 'success', summary: 'Sucesso', detail: 'Vaga Atualizada', life: 3000 });\r\n                }else{\r\n                    saveDataVagas(vaga.id)\r\n                    toast.current.show({ severity: 'success', summary: 'Sucesso', detail: 'Vaga Criada', life: 3000 });\r\n            }\r\n            setVaga(emptyVaga);\r\n        }\r\n\r\n            setVagas(_vagas);\r\n            setVagaDialog(false);\r\n        }\r\n    }\r\n\r\n   \r\n    const editVaga = (vaga) => {\r\n        setVaga({...vaga});\r\n        setVagaDialog(true);\r\n    }\r\n\r\n    const confirmDeleteVaga = (vaga) => {\r\n        setVaga(vaga);\r\n        setDeleteVagaDialog(true);\r\n    }\r\n\r\n    const deleteVaga = () => {\r\n        let _vagas = vagas.filter(val => val.id !== vaga.id);\r\n        let _removeVaga = vagas.filter(val => val.id === vaga.id);\r\n        let id = _removeVaga[0].id\r\n        dropVaga(id)\r\n        setVagas(_vagas);\r\n        setDeleteVagaDialog(false);\r\n        setVaga(emptyVaga);\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Vaga Deletada', life: 3000 });\r\n    }\r\n\r\n    const findIndexById = (id) => {\r\n        let index = -1;\r\n        for (let i = 0; i < vagas.length; i++) {\r\n            if (vagas[i].id === id) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n   \r\n    const confirmDeleteSelected = () => {\r\n        setDeleteVagasDialog(true);\r\n    }\r\n\r\n    const deleteSelectedVagas = () => {\r\n        let _vagas = vagas.filter(val => !selectedVagas.includes(val));\r\n        Array.from(selectedVagas).forEach((val)=>{\r\n            dropVaga(val.id)\r\n        })\r\n        setVagas(_vagas);\r\n        setDeleteVagasDialog(false);\r\n        setSelectedVagas(null);\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Vagas Deletadas', life: 3000 });\r\n    }\r\n\r\n    const onInputChange = (e, nome) => {\r\n        const val = (e.target && e.target.value) || '';\r\n        let _vaga = {...vaga};\r\n        _vaga[`${nome}`] = val;\r\n\r\n        setVaga(_vaga);\r\n    }\r\n\r\n    const onInputNumberChange = (e, nome) => {\r\n        const val = (e.target && e.target.value) || '';\r\n        let _vaga = {...vaga};\r\n        _vaga[`${nome}`] = val;\r\n\r\n        setVaga(_vaga);\r\n    }\r\n\r\n\r\n    const leftToolbarTemplate = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <Button label=\"Novo\" icon=\"pi pi-plus\" className=\"p-button-success mr-2\" onClick={openNew} />\r\n                <Button label=\"Deletar\" icon=\"pi pi-trash\" className=\"p-button-danger\" onClick={confirmDeleteSelected} disabled={!selectedVagas || !selectedVagas.length} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const actionBodyTemplate = (rowData) => {\r\n        return (\r\n            <React.Fragment>\r\n                <Button icon=\"pi pi-pencil\" className=\"p-button-rounded p-button-success mr-2\" onClick={() => editVaga(rowData)} />\r\n                <Button icon=\"pi pi-trash\" className=\"p-button-rounded p-button-warning\" onClick={() => confirmDeleteVaga(rowData)} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const header = (\r\n        <div className=\"table-header\">\r\n            <h5 className=\"mx-0 my-1\">Gerenciamento de Vagas</h5>\r\n            <span className=\"p-input-icon-left\">\r\n                <i className=\"pi pi-search\" />\r\n                <InputText type=\"search\" onInput={(e) => setGlobalFilter(e.target.value)} placeholder=\"Search...\" />\r\n            </span>\r\n        </div>\r\n    );\r\n    const vagaDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"Cancelar\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDialog} />\r\n            <Button label=\"Salvar\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={saveVaga} />\r\n        </React.Fragment>\r\n    );\r\n    const deleteVagaDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"Não\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteVagaDialog} />\r\n            <Button label=\"Sim\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={deleteVaga} />\r\n        </React.Fragment>\r\n    );\r\n    const deleteVagasDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"Não\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteVagasDialog} />\r\n            <Button label=\"Sim\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={deleteSelectedVagas} />\r\n        </React.Fragment>\r\n    );\r\n\r\n    const formataDate = (value) => {\r\n        let dataAtual =  value;\r\n        let dataAtualFormatada = dataAtual.split('-').reverse().join('/');\r\n        return dataAtualFormatada;\r\n    }\r\n\r\n    const dtaberturaBodytemplate = (rowData) => {\r\n        return formataDate(rowData.dtabertura);\r\n    }\r\n\r\n    const dtfechamentoBodytemplate = (rowData) => {\r\n        return formataDate(rowData.dtfechamento);\r\n    }\r\n\r\n    return (\r\n        <div className=\"datatable-crud\">\r\n            <Toast ref={toast} />\r\n\r\n            <div className=\"card\">\r\n                <Toolbar className=\"mb-4\" left={leftToolbarTemplate}></Toolbar>\r\n\r\n                <DataTable ref={dt} value={vagas} selection={selectedVagas} onSelectionChange={(e) => setSelectedVagas(e.value)}\r\n                    dataKey=\"id\" paginator rows={10} rowsPerPageOptions={[5, 10, 25]}\r\n                    paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n                    currentPageReportTemplate=\"Vendo de {first} a {last} de {totalRecords} vagas\"\r\n                    globalFilter={globalFilter} header={header} responsiveLayout=\"scroll\">\r\n                    <Column selectionMode=\"multiple\" headerStyle={{ width: '3rem' }} exportable={false}></Column>\r\n                    <Column field=\"nome\" header=\"Nome\" sortable></Column>\r\n                    <Column field=\"setor\" header=\"Setor\" sortable></Column>\r\n                    <Column field=\"dtabertura\" body={dtaberturaBodytemplate} header=\"Data abertura\" sortable></Column>\r\n                    <Column field=\"dtfechamento\" body={dtfechamentoBodytemplate} header=\"Data fechamento\" sortable></Column>\r\n                    <Column field=\"descricao\" header=\"Descrição\"></Column>\r\n                    <Column body={actionBodyTemplate} exportable={false} style={{ minWidth: '8rem' }}></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <Dialog visible={vagaDialog} style={{ width: '80%' }} header=\"Detalhes da Vaga\" modal className=\"p-fluid card\" footer={vagaDialogFooter} onHide={hideDialog}>\r\n                <div className=\"grid\">\r\n                <div className=\"field col-12 md:col-6 lg:col-6\">\r\n                    <label htmlFor=\"nome\">Nome</label>\r\n                    <InputText id=\"nome\" value={vaga.nome} onChange={(e) => onInputChange(e, 'nome')} required autoFocus className={classNames({ 'p-invalid': submitted && !vaga.nome })} />\r\n                    {submitted && !vaga.nome && <small className=\"p-error\">Nome é obrigatório.</small>}\r\n                </div>\r\n                <div className=\"field col-12 md:col-6 lg:col-6\">\r\n                    <label htmlFor=\"setor\">Setor</label>\r\n                    <InputText id=\"setor\" value={vaga.setor} onChange={(e) => onInputChange(e, 'setor')} required autoFocus className={classNames({ 'p-invalid': submitted && !vaga.setor })} />\r\n                    {submitted && !vaga.setor && <small className=\"p-error\">Setor é obrigatório.</small>}\r\n                </div>\r\n                <div className=\"field col-12 md:col-6 lg:col-6\">\r\n                    <label htmlFor=\"dtabertura\">Data de abrtura</label>\r\n                    <InputText type=\"date\" id=\"dtabertura\" value={vaga.dtabertura} onChange={(e) => onInputChange(e, 'dtabertura')} required autoFocus className={classNames({ 'p-invalid': submitted && !vaga.dtabertura })} />\r\n                    {submitted && !vaga.dtabertura && <small className=\"p-error\">Data de abertura é obrigatório.</small>}\r\n                </div>\r\n                <div className=\"field col-12 md:col-6 lg:col-6\">\r\n                    <label htmlFor=\"dtfechamento\">Data de fechamento</label>\r\n                    <InputText type=\"date\" id=\"dtfechamento\" value={vaga.dtfechamento} onChange={(e) => onInputChange(e, 'dtfechamento')} required autoFocus className={classNames({ 'p-invalid': submitted && !vaga.dtfechamento })} />\r\n                    {submitted && !vaga.dtfechamento && <small className=\"p-error\">Data de fechamento é obrigatório.</small>}\r\n                </div>\r\n                <div className=\"field field col-12 md:col-12 lg:col-12\">\r\n                    <label htmlFor=\"descricao\">Descrição</label>\r\n                    <InputTextarea id=\"descricao\" value={vaga.descricao} onChange={(e) => onInputChange(e, 'descricao')} required autoFocus className={classNames({ 'p-invalid': submitted && !vaga.descricao })} />\r\n                    {submitted && !vaga.descricao && <small className=\"p-error\">Descrição é obrigatório.</small>}\r\n                </div>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <Dialog visible={deleteVagaDialog} style={{ width: '450px' }} header=\"Confirmação\" modal footer={deleteVagaDialogFooter} onHide={hideDeleteVagaDialog}>\r\n                <div className=\"confirmation-content\">\r\n                    <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem'}} />\r\n                    {vaga && <span>Deseja excluir a vaga de <b>{vaga.nome}</b>?</span>}\r\n                </div>\r\n            </Dialog>\r\n\r\n            <Dialog visible={deleteVagasDialog} style={{ width: '450px' }} header=\"Confirmação\" modal footer={deleteVagasDialogFooter} onHide={hideDeleteVagasDialog}>\r\n                <div className=\"confirmation-content\">\r\n                    <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem'}} />\r\n                    {vaga && <span>Tem certeza que deseja excluir as vagas selecionadas?</span>}\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n                 \r\nexport default function Vagas() {\r\n    return <div className=\"card\">\r\n        <div className=\"card text-center\"><h3>Cadastro de Vagas</h3></div>\r\n        < DataTableCrudVaga />\r\n    </div>\r\n}","C:\\Users\\amilt\\OneDrive\\Área de Trabalho\\PI_2022\\selettra_recruitament\\src\\Pages\\Candidatures.js",["51"],"\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { classNames } from 'primereact/utils';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Button } from 'primereact/button';\r\nimport { Toolbar } from 'primereact/toolbar';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { InputTextarea } from 'primereact/inputtextarea'\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport './DataTableDemo.css';\r\nimport axios from 'axios';\r\n\r\nconst DataTableCrud = () => {\r\n\r\n    let emptyCandidatura = {\r\n        id: \"\",\r\n        dtcad: \"\",\r\n        usercad: \"\",\r\n        ativo: \"\",\r\n        idcandidato: \"\",\r\n        idvaga: \"\",\r\n        nomecandidato: \"\",\r\n        nomevaga: \"\",\r\n        status: \"\",\r\n        observacoes:\"\"\r\n    };\r\n\r\n    let emptyCandidaturaObs = {\r\n        id: \"\",\r\n        dtcad: \"\",\r\n        usercad: \"\",\r\n        ativo: \"\",\r\n        idcandidato: \"\",\r\n        idvaga: \"\",\r\n        descricao: \"\",\r\n    };\r\n\r\n\r\n    const [candidaturas, setCandidaturas] = useState(null);\r\n    const [candidaturaDialog, setCandidaturaDialog] = useState(false);\r\n    const [obsevacoesDialog, setObsevacoesDialog] = useState(false);\r\n    const [deleteCandidaturaDialog, setDeleteCandidaturaDialog] = useState(false);\r\n    const [deleteCandidaturasDialog, setDeleteCandidaturasDialog] = useState(false);\r\n    const [candidatura, setCandidatura] = useState(emptyCandidatura);\r\n    const [obs, setObs] = useState(emptyCandidaturaObs);\r\n    const [selectedCandidaturas, setSelectedCandidaturas] = useState(null);\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [globalFilter, setGlobalFilter] = useState(null);\r\n    const [opcoesVaga, setOpcoesVaga] = useState(null)\r\n    const [selectedVaga, setSelectedVaga] = useState(null)\r\n    const [opcoesCandidato, setOpcoesCandidato] = useState(null)\r\n    const [selectedCandidato, setSelectedCandidato] = useState(null)\r\n    const [seletctedStatus, setSelectedStatus]=useState(null)\r\n    const toast = useRef(null);\r\n    const dt = useRef(null);\r\n    const load = useRef(null\r\n    );\r\n    const Api = axios.create({baseURL: 'http://localhost:8081/'});\r\n\r\n\r\n    useEffect(() => {\r\n        fetchAll();\r\n        fetchAllCandidatos()\r\n        fetchAllVagas()\r\n    }, []);\r\n\r\n    const fetchAll = () => {\r\n        load.current = true;\r\n        async function fetchAll() {\r\n            const result = await Api.get(\"candidaturas\")\r\n            if (result.data) {\r\n                setCandidaturas(result.data)\r\n            }\r\n        }\r\n        if (load.current) {\r\n            fetchAll();\r\n        }\r\n        load.current = false;\r\n    }\r\n\r\n    function limpaTable() {\r\n\r\n        var elemento = document.getElementById(\"obs\")\r\n\r\n        var child = elemento.firstElementChild; \r\n        while (child) {\r\n            elemento.removeChild(child);\r\n            child = elemento.firstElementChild;\r\n        }\r\n    }\r\n\r\n    const fetchObsCanidatura = (dados) => {\r\n        load.current = true;\r\n        let idvaga = dados.idvaga\r\n        let idcandidato = dados.idcandidato\r\n        async function fetchObs() {\r\n            const result = await Api.post(\"candidaturasobservacoes/procurar\", {\r\n                idvaga: parseInt(idvaga),\r\n                idcandidato: parseInt(idcandidato)\r\n            })\r\n            limpaTable()\r\n            if (result.data.length > 0) {\r\n                let array = result.data\r\n                let grid = document.getElementById(\"obs\")\r\n                for(let val of array) {\r\n                    let row = document.createElement(\"div\")\r\n                    row.className=\"grid clasobs\"\r\n                    let divone = document.createElement(\"div\")\r\n                    divone.className = \"col-11 md:col-11 lg:col-11\"\r\n                    let divtwo = document.createElement(\"div\")\r\n                    divtwo.className = \"col-11 md:col-1 lg:col-1\"\r\n                    let button = document.createElement(\"button\")\r\n                    button.textContent = \"X\"\r\n                    button.className = \"btn btn-sm\"\r\n                    button.onclick = () => {\r\n                        dropObs(val.id)\r\n                    }\r\n\r\n                    var p = document.createElement(\"td\")\r\n                    p.textContent = val.descricao\r\n                    \r\n                    divone.append(p)\r\n                    divtwo.append(button)\r\n                    row.append(divone)\r\n                    row.append(divtwo)\r\n                    grid.append(row)\r\n                }\r\n            }\r\n        }\r\n        if (load.current) {\r\n            fetchObs();\r\n        }\r\n        load.current = false;\r\n    }\r\n\r\n    const fetchAllCandidatos = () => {\r\n        load.current = true;\r\n        async function fetchAll() {\r\n            const result = await Api.get(\"candidatos\")\r\n            if (result.data) {\r\n                setOpcoesCandidato(result.data)\r\n            }\r\n        }\r\n        if (load.current) {\r\n            fetchAll();\r\n        }\r\n        load.current = false;\r\n    }\r\n\r\n    const fetchAllVagas = () => {\r\n        load.current = true;\r\n        async function fetchAll() {\r\n            const result = await Api.get(\"vagas\")\r\n            if (result.data) {\r\n                setOpcoesVaga(result.data)\r\n            }\r\n        }\r\n        if (load.current) {\r\n            fetchAll();\r\n        }\r\n        load.current = false;\r\n    }\r\n\r\n    const newCandidatura =()=>{\r\n        load.current=true;\r\n        async function newCandidatura(){\r\n            const result = await Api.post(\"candidaturas\",{usercad: \"Usuário\"})\r\n            if(result.data){\r\n                candidatura.id = result.data.id\r\n                setSubmitted(false);\r\n                setCandidaturaDialog(true);\r\n            }\r\n        }\r\n        if(load.current){\r\n            newCandidatura()\r\n        }\r\n        load.current=false\r\n    }\r\n    \r\n    const newCandidaturaObs = () => {\r\n        load.current=true;\r\n        async function newCandidatura(){\r\n            const result = await Api.post(\"candidaturasobservacoes\",{usercad: \"Usuário\"})\r\n            if(result.data){\r\n                obs.id = result.data.id\r\n                setObsevacoesDialog(true);\r\n            }\r\n        }\r\n        if(load.current){\r\n            newCandidatura()\r\n        }\r\n        load.current=false\r\n    }\r\n\r\n    const saveDataCandidaturas=(id)=>{\r\n        load.current = true\r\n        async function save(){\r\n            const result = await Api.post(`candidaturas/${id}/atualizar`,\r\n            {\r\n                id: id,\r\n                observacoes: candidatura.observacoes,\r\n                idcandidato: selectedCandidato.id,\r\n                nomecandidato: selectedCandidato.nome,\r\n                idvaga: selectedVaga.id,\r\n                nomevaga: selectedVaga.nome,\r\n                status: seletctedStatus\r\n            })\r\n            if(result.data === true){\r\n                setCandidatura(emptyCandidatura);\r\n                setSelectedCandidato(null);\r\n                setSelectedVaga(null);\r\n                setSelectedStatus(null)\r\n                setSubmitted(false);\r\n                setCandidaturaDialog(false);\r\n                fetchAll();\r\n                }\r\n        }\r\n        if(load.current){\r\n            save()\r\n        }\r\n        load.current =false\r\n    }\r\n\r\n\r\n    const saveDataCandidaturasObs =(id)=> {\r\n        load.current = true\r\n        async function saveObs(){\r\n            const result = await Api.post(`candidaturasobservacoes/${id}/atualizar`,\r\n            {\r\n                id: id,\r\n                idcandidato: selectedCandidato.id,\r\n                idvaga: selectedVaga.id,\r\n                descricao: obs.descricao\r\n            })\r\n            if(result.data === true){\r\n                setObs(emptyCandidaturaObs);\r\n                setObsevacoesDialog(false);\r\n                fetchObsCanidatura(candidatura);\r\n            }\r\n        }\r\n        if(load.current){\r\n            saveObs()\r\n        }\r\n        load.current =false\r\n    }\r\n\r\n    const dropCandidatura=(id)=>{\r\n        load.current = true\r\n            async function drop(){\r\n                const response = await Api.post(`candidaturas/${id}/excluir`,{\r\n                    id: parseInt(id)  \r\n                })\r\n            if(response.data === true){\r\n                fetchAll()\r\n            }\r\n            }\r\n            if(load.current){\r\n                drop()\r\n            }\r\n        load.current =false\r\n    }\r\n\r\n    const dropObs =(id)=>{\r\n        load.current = true\r\n            async function drop(){\r\n                const response = await Api.post(`candidaturasobservacoes/${id}/excluir`,{\r\n                    id: parseInt(id)  \r\n                })\r\n            if(response.data === true){\r\n                fetchObsCanidatura(candidatura)\r\n            }\r\n            }\r\n            if(load.current){\r\n                drop()\r\n            }\r\n        load.current =false\r\n    }\r\n\r\n    const buscarUmCandidato =(dados)=>{\r\n        load.current = true\r\n        let id = dados.idcandidato\r\n            async function fetch(){\r\n                const response = await Api.get(`candidatos/${id}`,{\r\n                    id: id  \r\n                })\r\n            if(response.data){\r\n                setSelectedCandidato(response.data)\r\n            }\r\n            }\r\n            if(load.current){\r\n                fetch()\r\n            }\r\n        load.current =false\r\n    }\r\n\r\n    const buscarUmaVaga =(dados)=>{\r\n        load.current = true\r\n        let id = dados.idvaga\r\n            async function fetch(){\r\n                const response = await Api.get(`vagas/${id}`,{\r\n                    id: id  \r\n                })\r\n            if(response.data){\r\n                setSelectedVaga(response.data)\r\n            }\r\n            }\r\n            if(load.current){\r\n                fetch()\r\n            }\r\n        load.current =false\r\n    }\r\n\r\n    const openNew = () => {\r\n        newCandidatura()\r\n    }\r\n\r\n    const openNewObs = () => {\r\n        newCandidaturaObs()\r\n    }\r\n\r\n    const hideDialog = () => {\r\n        setSubmitted(false);\r\n        setSelectedStatus(null)\r\n        setSelectedCandidato(null)\r\n        setSelectedVaga(null)\r\n        setCandidatura(emptyCandidatura)\r\n        setCandidaturaDialog(false);\r\n        limpaTable()\r\n    }\r\n    \r\n    const hideDialogObs = () => {\r\n        setObsevacoesDialog(false);\r\n    }\r\n\r\n    const hideDeleteCandidaturaDialog = () => {\r\n        setDeleteCandidaturaDialog(false);\r\n    }\r\n\r\n    const hideDeleteCandidaturasDialog = () => {\r\n        setDeleteCandidaturasDialog(false);\r\n    }\r\n\r\n    const saveCandidatura = () => {\r\n        setSubmitted(true);\r\n\r\n        if (candidatura.id !== '') {\r\n            let _candidaturas = [...candidaturas];\r\n         \r\n            if (candidatura.id) {\r\n                const index = findIndexById(candidatura.id);\r\n                if(index >= 0){\r\n\r\n                    saveDataCandidaturas(candidatura.id)\r\n                    toast.current.show({ severity: 'success', summary: 'Sucesso', detail: 'Candidatura Atualizada', life: 3000 });\r\n                }else{\r\n                    saveDataCandidaturas(candidatura.id)\r\n                    toast.current.show({ severity: 'success', summary: 'Sucesso', detail: 'Candidatura Criada', life: 3000 });\r\n            }\r\n            setCandidatura(emptyCandidatura);\r\n        }\r\n\r\n            setCandidaturas(_candidaturas);\r\n            setCandidaturaDialog(false);\r\n        }\r\n    }\r\n\r\n\r\n    const saveCandidaturaObs = () => {\r\n\r\n        if (candidatura.id !== '' && obs.id !== '') {\r\n            saveDataCandidaturasObs(obs.id);\r\n            setObs(emptyCandidaturaObs);\r\n            setObsevacoesDialog(false);\r\n        }\r\n    }\r\n\r\n   \r\n    const editCandidatura = (candidatura) => {\r\n        setCandidatura({ ...candidatura });\r\n        setSelectedStatus(candidatura.status);\r\n        buscarUmCandidato(candidatura)\r\n        buscarUmaVaga(candidatura)\r\n        fetchObsCanidatura(candidatura)\r\n        setCandidaturaDialog(true);\r\n    }\r\n\r\n    const confirmDeleteCandidatura = (candidatura) => {\r\n        setCandidatura(candidatura);\r\n        setDeleteCandidaturaDialog(true);\r\n    }\r\n\r\n    const deleteCandidatura = () => {\r\n        let _candidaturas = candidaturas.filter(val => val.id !== candidatura.id);\r\n        let _removeCandidatura = candidaturas.filter(val => val.id === candidatura.id);\r\n        let id = _removeCandidatura[0].id\r\n        dropCandidatura(id)\r\n        setCandidaturas(_candidaturas);\r\n        setDeleteCandidaturaDialog(false);\r\n        setCandidatura(emptyCandidatura);\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Candidatura Deletada', life: 3000 });\r\n    }\r\n\r\n    const findIndexById = (id) => {\r\n        let index = -1;\r\n        for (let i = 0; i < candidaturas.length; i++) {\r\n            if (candidaturas[i].id === id) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n   \r\n    const confirmDeleteSelected = () => {\r\n        setDeleteCandidaturasDialog(true);\r\n    }\r\n\r\n    const deleteSelectedCandidaturas = () => {\r\n        let _candidaturas = candidaturas.filter(val => !selectedCandidaturas.includes(val));\r\n        Array.from(selectedCandidaturas).forEach((val)=>{\r\n            dropCandidatura(val.id)\r\n        })\r\n        setCandidaturas(_candidaturas);\r\n        setDeleteCandidaturasDialog(false);\r\n        setSelectedCandidaturas(null);\r\n        toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Candidaturas Deletadas', life: 3000 });\r\n    }\r\n\r\n    const onInputChange = (e, nome) => {\r\n        const val = (e.target && e.target.value) || '';\r\n        let _candidatura = {...candidatura};\r\n        _candidatura[`${nome}`] = val;\r\n\r\n        setCandidatura(_candidatura);\r\n    }\r\n\r\n    const onInputChangeObs = (e, nome) => {\r\n        const val = (e.target && e.target.value) || '';\r\n        let _obs = {...obs};\r\n        _obs[`${nome}`] = val;\r\n\r\n        setObs(_obs);\r\n    }\r\n\r\n    const leftToolbarTemplate = () => {\r\n        return (\r\n            <React.Fragment>\r\n                <Button label=\"Novo\" icon=\"pi pi-plus\" className=\"p-button-success mr-2\" onClick={openNew} />\r\n                <Button label=\"Deletar\" icon=\"pi pi-trash\" className=\"p-button-danger\" onClick={confirmDeleteSelected} disabled={!selectedCandidaturas || !selectedCandidaturas.length} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    const actionBodyTemplate = (rowData) => {\r\n        return (\r\n            <React.Fragment>\r\n                <Button icon=\"pi pi-pencil\" className=\"p-button-rounded p-button-success mr-2\" onClick={() => editCandidatura(rowData)} />\r\n                <Button icon=\"pi pi-trash\" className=\"p-button-rounded p-button-warning\" onClick={() => confirmDeleteCandidatura(rowData)} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    const header = (\r\n        <div className=\"table-header\">\r\n            <h5 className=\"mx-0 my-1\">Gerenciamento de Candidaturas</h5>\r\n            <span className=\"p-input-icon-left\">\r\n                <i className=\"pi pi-search\" />\r\n                <InputText type=\"search\" onInput={(e) => setGlobalFilter(e.target.value)} placeholder=\"Search...\" />\r\n            </span>\r\n        </div>\r\n    );\r\n    const candidaturaDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"Cancelar\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDialog} />\r\n            <Button label=\"Salvar\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={saveCandidatura} />\r\n        </React.Fragment>\r\n    );\r\n\r\n    const observacoesDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"Cancelar\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDialogObs} />\r\n            <Button label=\"Salvar\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={saveCandidaturaObs} />\r\n        </React.Fragment>\r\n    );\r\n\r\n    const deleteCandidaturaDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"Não\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteCandidaturaDialog} />\r\n            <Button label=\"Sim\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={deleteCandidatura} />\r\n        </React.Fragment>\r\n    );\r\n    const deleteCandidaturasDialogFooter = (\r\n        <React.Fragment>\r\n            <Button label=\"Não\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteCandidaturasDialog} />\r\n            <Button label=\"Sim\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={deleteSelectedCandidaturas} />\r\n        </React.Fragment>\r\n    );\r\n\r\n\r\n    const opcoesStatus = [\r\n        {name:\"Em processo\", value:\"Em processo\"},\r\n        {name:\"Aprovado\", value:\"Aprovado\"},\r\n        {name:\"Reprovado\", value:\"Reprovado\"},\r\n    ]\r\n\r\n    return (\r\n        <div className=\"datatable-crud\">\r\n            <Toast ref={toast} />\r\n\r\n            <div className=\"card\">\r\n                <Toolbar className=\"mb-4\" left={leftToolbarTemplate}></Toolbar>\r\n\r\n                <DataTable ref={dt} value={candidaturas} selection={selectedCandidaturas} onSelectionChange={(e) => setSelectedCandidaturas(e.value)}\r\n                    dataKey=\"id\" paginator rows={10} rowsPerPageOptions={[5, 10, 25]}\r\n                    paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n                    currentPageReportTemplate=\"Vendo de {first} a {last} de {totalRecords} candidaturas\"\r\n                    globalFilter={globalFilter} header={header} responsiveLayout=\"scroll\">\r\n                    <Column selectionMode=\"multiple\" headerStyle={{ width: '3rem' }} exportable={false}></Column>\r\n                    <Column field=\"nomecandidato\" header=\"Candidato\" sortable></Column>\r\n                    <Column field=\"nomevaga\" header=\"Vaga\" sortable></Column>\r\n                    <Column field=\"status\" header=\"Status\" sortable></Column>\r\n                    <Column field=\"observacoes\" header=\"Observação\" sortable></Column>\r\n                    <Column body={actionBodyTemplate} header=\"Ações\" style={{ minWidth: '8rem' }}></Column>\r\n                </DataTable>\r\n            </div>\r\n\r\n            <Dialog visible={candidaturaDialog} style={{ width: '80%' }} header=\"Detalhes da Candidatura\" modal className=\"p-fluid card\" footer={candidaturaDialogFooter} onHide={hideDialog}>\r\n                <div className=\"grid\">\r\n                <div className=\"field col-12 md:col-6 lg:col-4\">\r\n                        <label htmlFor=\"candidato\">Candidato</label>\r\n                        \r\n\r\n                    <Dropdown value={selectedCandidato} options={opcoesCandidato} onChange={(e) =>setSelectedCandidato(e.value)} optionLabel=\"nome\" filter showClear filterBy=\"nome\" placeholder=\"Selecione um candidato\"className={classNames({ 'p-invalid': submitted && !selectedCandidato })}/>\r\n                    {submitted && !selectedCandidato && <small className=\"p-error\">Candidato é obrigatório.</small>}\r\n                        \r\n                    </div>\r\n                    <div className=\"field col-12 md:col-6 lg:col-4\">\r\n                <label htmlFor=\"vaga\">Vaga</label>\r\n                    <Dropdown value={selectedVaga} options={opcoesVaga} onChange={(e)=>setSelectedVaga(e.value)} optionLabel=\"nome\" filter showClear filterBy=\"nome\" placeholder=\"Selecione uma vaga\" className={classNames({ 'p-invalid': submitted && !selectedVaga })}/>\r\n                    {submitted && !selectedVaga && <small className=\"p-error\">Vaga é obrigatório.</small>}\r\n                    </div>\r\n                    <div className=\"field col-12 md:col-6 lg:col-4\">\r\n                <label htmlFor=\"vaga\">Status</label>\r\n                    <Dropdown value={seletctedStatus} options={opcoesStatus} onChange={(e)=>setSelectedStatus(e.value)} optionLabel=\"name\"/>\r\n                    </div>\r\n                    <div className=\"field col-12 md:col-12 lg:col-12\">\r\n                    <label htmlFor=\"observacoes\">Observação</label>\r\n                    <InputTextarea id=\"observacoes\" value={candidatura.observacoes} onChange={(e) => onInputChange(e, 'observacoes')} rows={3} cols={10}  />                   </div>\r\n                    <div className=\"field col-12 md:col-12 lg:col-12\">\r\n                    <Button label=\"Observações\" icon=\"pi pi-plus\" className=\"p-button-danger w-2\" onClick={openNewObs} />\r\n                    </div>\r\n                    <div className=\"field col-12 md:col-12 lg:col-12\">\r\n                        <div className=\"card\">\r\n                            <div className=\"grid\">\r\n                            <div className=\"col-12 md:col-6 lg:col-6\" id=\"obs\"></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <Dialog visible={obsevacoesDialog} style={{ width: '40%' }} header=\"Observações\" modal className=\"p-fluid card\" footer={observacoesDialogFooter} onHide={hideDialogObs}>\r\n                <div className=\"grid\">\r\n                    <div className=\"field col-12 md:col-12 lg:col-12\">\r\n                    <label htmlFor=\"descricao\">Observação</label>\r\n                        <InputTextarea id=\"descricao\" value={obs.descricao} onChange={(e) => onInputChangeObs(e, 'descricao')} rows={3} cols={10} />\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n\r\n            <Dialog visible={deleteCandidaturaDialog} style={{ width: '450px' }} header=\"Confirmação\" modal footer={deleteCandidaturaDialogFooter} onHide={hideDeleteCandidaturaDialog}>\r\n                <div className=\"confirmation-content\">\r\n                    <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem'}} />\r\n                    {candidatura && <span>Deseja excluir a candidatura de <b>{candidatura.nomecandidato}</b>?</span>}\r\n                </div>\r\n            </Dialog>\r\n\r\n            <Dialog visible={deleteCandidaturasDialog} style={{ width: '450px' }} header=\"Confirmação\" modal footer={deleteCandidaturasDialogFooter} onHide={hideDeleteCandidaturasDialog}>\r\n                <div className=\"confirmation-content\">\r\n                    <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem'}} />\r\n                    {candidatura && <span>Tem certeza que deseja excluir as candidaturas selecionadas?</span>}\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n                 \r\nexport default function Candidatures() {\r\n    return <div className=\"card\">\r\n        <div className=\"card text-center\"><h3>Candidaturas</h3></div>\r\n        < DataTableCrud />\r\n    </div>\r\n}","C:\\Users\\amilt\\OneDrive\\Área de Trabalho\\PI_2022\\selettra_recruitament\\src\\Pages\\Home.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":2,"column":17,"nodeType":"58","messageId":"59","endLine":2,"endColumn":25},{"ruleId":"56","severity":1,"message":"60","line":2,"column":27,"nodeType":"58","messageId":"59","endLine":2,"endColumn":33},{"ruleId":"61","severity":1,"message":"62","line":111,"column":7,"nodeType":"63","endLine":111,"endColumn":9,"suggestions":"64"},{"ruleId":"56","severity":1,"message":"65","line":12,"column":10,"nodeType":"58","messageId":"59","endLine":12,"endColumn":21},{"ruleId":"61","severity":1,"message":"66","line":48,"column":8,"nodeType":"63","endLine":48,"endColumn":10,"suggestions":"67"},{"ruleId":"56","severity":1,"message":"68","line":220,"column":11,"nodeType":"58","messageId":"59","endLine":220,"endColumn":30},{"ruleId":"61","severity":1,"message":"69","line":68,"column":8,"nodeType":"63","endLine":68,"endColumn":10,"suggestions":"70"},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchAllcandidatos'. Either include it or remove the dependency array.","ArrayExpression",["73"],"'InputNumber' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchAll'. Either include it or remove the dependency array.",["74"],"'onInputNumberChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchAll', 'fetchAllCandidatos', and 'fetchAllVagas'. Either include them or remove the dependency array.",["75"],"no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [fetchAllcandidatos]",{"range":"82","text":"83"},"Update the dependencies array to be: [fetchAll]",{"range":"84","text":"85"},"Update the dependencies array to be: [fetchAll, fetchAllCandidatos, fetchAllVagas]",{"range":"86","text":"87"},[3838,3840],"[fetchAllcandidatos]",[1599,1601],"[fetchAll]",[2386,2388],"[fetchAll, fetchAllCandidatos, fetchAllVagas]"]